/* eslint-disable @typescript-eslint/no-misused-promises */

// interface Props {}
import Head from "next/head";
import { useEffect, useState, type SyntheticEvent } from "react";
import { useForm, type SubmitHandler } from "react-hook-form";
import { api } from "@/utils/api";

import Layout from "@/components/layouts/Layout";
import Dropzone from "@/components/pages/post-page/upload/Dropzone";
import useProtectedView from "@/hooks/useProtectedView";
import UploadUser from "@/components/pages/post-page/upload/UploadUser";

import useTags from "@/hooks/useTags";
import InputTags from "@/components/pages/post-page/upload/InputTags";
import UploadSkeleton from "@/components/pages/post-page/upload/UploadSkeleton";

import toBase64 from "@/utils/toBase64";
import getAverageColor from "@/utils/getAverageColor";

interface Inputs {
  title: string;
  description: string;
}

const UploadPage = ({}) => {
  const { status, session } = useProtectedView();
  const [image, setImage] = useState<File | null>(null);
  const { config: tagConfig, tags, clearTags } = useTags();
  const [isLoading, setIsLoading] = useState(false);

  const postCreate = api.post.postCreate.useMutation();

  const {
    register,
    handleSubmit,
    formState: { errors },
    setError,
    reset,
    watch,
  } = useForm<Inputs>();

  const handleFiles = (file: File) => {
    if (file.type.startsWith("image/")) {
      setImage(file);
      return;
    }

    setError("root", {
      message: "File should be an image",
      type: "validate",
    });
  };

  // form
  const onSubmit: SubmitHandler<Inputs> = async (rawData) => {
    if (image == null) {
      setError("root", {
        message: "You should upload a picture ¬_¬",
        type: "required",
      });
      return;
    }

    if (tags.length < 2) {
      setError("root", {
        message: "Minimum 2 tags required",
        type: "required",
      });
      return;
    }

    setIsLoading(true);
    const imageB64 = await toBase64(image);
    const averageColor = await getAverageColor(imageB64);

    try {
      const asset = (await fetch("/api/assets/upload", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          image: imageB64,
        }),
      }).then((res) => res.json())) as {
        secure_url: string;
        id: string;
        width: number;
        height: number;
      };


      postCreate.mutate({
        ...rawData,
        tags,
        imageUrl: asset.secure_url,
        imageHeight: asset.height,
        imageWidth: asset.width,
        imageColorHex: averageColor
      });
    } catch (error) {
      setIsLoading(false);
      setError("root", {
        message: "Something went wrong u_u",
      });
    }
  };

  useEffect(() => {
    setIsLoading(postCreate.isLoading);

    if (postCreate.isError) {
      setIsLoading(false);
      return setError("root", {
        message: postCreate.error.message,
      });
    }

    if (postCreate.isSuccess) {
      setImage(null);
      clearTags();
      setIsLoading(false);
      return reset();
    }
  }, [postCreate.isLoading, postCreate.isError, postCreate.isSuccess]);

  return (
    <>
      <Head>
        <title>Pictures</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Layout>
        {status === "loading" && <UploadSkeleton />}
        {status === "authenticated" && (
          <main className="mx-auto w-full max-w-5xl pt-4 container">
            <form onSubmit={handleSubmit(onSubmit)} className="flex gap-4 flex-col md:flex-row">
              <Dropzone
                handleFiles={handleFiles}
                image={image}
                disabled={isLoading}
              />
              <div className="flex flex-1 flex-col gap-2">
                <UploadUser
                  image={session?.user.image as string | null}
                  name={session?.user.name as string}
                  id={session?.user.id as string}
                />

                {errors.root && (
                  <div className="text-border-red-900 rounded-2xl border border-red-900 bg-red-200 p-4">
                    <p>{errors.root.message}</p>
                  </div>
                )}

                <div>
                  <p className="ml-3 text-sm text-red-800">
                    {errors.title && errors.title.message}
                  </p>
                  <input
                    type="text"
                    placeholder="title"
                    className="input-text"
                    disabled={isLoading}
                    {...register("title", {
                      required: {
                        value: true,
                        message: "Title is required",
                      },
                      minLength: {
                        value: 2,
                        message: "Minimum 2 characters",
                      },
                      maxLength: {
                        value: 24,
                        message: "Maximum 24 characters",
                      },
                    })}
                  />
                </div>
                <div>
                  <p className="ml-3 text-sm text-red-800">
                    {errors.description && errors.description.message}
                  </p>
                  <div className="relative">
                    <textarea
                      placeholder="description"
                      className="input-text min-h-[100px] resize-none"
                      disabled={isLoading}
                      {...register("description", {
                        required: {
                          value: true,
                          message: "Description is required",
                        },
                        minLength: {
                          value: 2,
                          message: "Minimum 2 characters",
                        },
                        maxLength: {
                          value: 256,
                          message: "Maximum 256 characters",
                        },
                        onChange: (e: SyntheticEvent) => {
                          const elm = e.target as HTMLTextAreaElement;
                          elm.style.height = "auto";
                          elm.style.height = `${elm.scrollHeight}px`;
                        },
                      })}
                    ></textarea>
                    {watch("description") &&
                      watch("description").length > 10 && (
                        <p
                          className={`absolute bottom-2 right-2 select-none text-sm ${
                            watch("description").length > 256
                              ? "text-red-700"
                              : "text-zinc-400"
                          }`}
                        >
                          {watch("description").length}/265
                        </p>
                      )}
                  </div>
                </div>

                <InputTags config={tagConfig} disabled={isLoading} />

                <button
                  type="submit"
                  className="btn btn-primary"
                  disabled={isLoading}
                >
                  {isLoading ? "Uploading..." : " Upload"}
                </button>
              </div>
            </form>
          </main>
        )}
      </Layout>
    </>
  );
};

export default UploadPage;
