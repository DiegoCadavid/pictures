import { type GetServerSidePropsContext } from "next";
import Head from "next/head";
import { api } from "@/utils/api";

import Layout from "@/components/layouts/Layout";
import PostComments from "@/components/pages/post-page/comments/PostComments";
import PostImage from "@/components/pages/post-page/PostImage";

import PostInfo from "@/components/pages/post-page/PostInfo";
import CardColumnsContainer from "@/components/cards-column/CardColumnsContainer";
import getSSRHelper from "@/server/api/getSSRHelper";

interface Props {
  id: string;
}

export const getServerSideProps = async (ctx: GetServerSidePropsContext) => {
  const id = ctx.params?.id as string;
  const helper = await getSSRHelper(ctx);
  await helper.post.getById.prefetch(id);

  return {
    props: {
      id,
      trpcState: helper.dehydrate(),
    },
  };
};

const PostPage = ({ id }: Props) => {
  const postIdQuery = api.post.getById.useQuery(id);
  const postAllQuery = api.post.getAll.useQuery();
  const userFollowsCount = api.user.followsCountsByUserId.useQuery(
    postIdQuery.data?.authorId as string
  );

  return (
    <>
      <Head>
        <title>Pictures</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Layout>
        <main className="">
          <div className="relative">
            <div className="relative mx-auto flex flex-col md:flex-row max-w-4xl gap-4 py-4 md:py-12 container">
              {/* image */}
              {postIdQuery.data && (
                <PostImage
                  imageUrl={postIdQuery.data.imageUrl}
                  imageHeight={postIdQuery.data.imageHeight}
                  imageWidth={postIdQuery.data.imageWidth}
                  imageColorHex={postIdQuery.data.imageColorHex}
                  tags={postIdQuery.data.tags}
                  bookmarks={postIdQuery.data.bookmarks}
                  postId={id}
                />
              )}
              {/* Info - comments */}
              {postIdQuery.data && !postIdQuery.isLoading && (
                <div className="flex-1">
                  <PostInfo
                    userName={postIdQuery.data.author?.name || "Jhon"}
                    userImage={postIdQuery.data.author?.image || ""}
                    description={postIdQuery.data.description}
                    userId={postIdQuery.data.author?.id}
                    title={postIdQuery.data.title}
                    followers={
                      !userFollowsCount.isLoading && userFollowsCount.data
                        ? userFollowsCount.data._count.followers
                        : null
                    }
                  />
                  <PostComments postId={id}/>
                </div>
              )}
            </div>
            {/* Background */}
            <div className=" hidden md:block absolute inset-y-0 left-0 right-1/2 -translate-x-52 -z-0 bg-zinc-200" />
            {/* Shadow button */}
            <div className="absolute inset-x-0 bottom-0 z-0 h-12 bg-gradient-to-t from-black/10" />
          </div>
          <div className="container mx-auto mt-6">
            {!postAllQuery.isLoading && postAllQuery.data && (
              <CardColumnsContainer
                posts={postAllQuery.data.filter((post) => post.id !== id)}
              />
            )}
          </div>
        </main>
      </Layout>
    </>
  );
};

export default PostPage;
