// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Bookmark {
    id     String @id @default(cuid())
    userId String
    postId String

    createdAt DateTime @default(now())

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}


model Tags {
    id    String     @id @default(cuid())
    name  String     @unique
    posts PostTags[]
}

model PostTags {
    id     String @id @default(cuid())
    postId String
    tagId  String

    post Post @relation(fields: [postId], references: [id])
    tag  Tags @relation(fields: [tagId], references: [id])
}


model Post {
    id            String @id @default(cuid())
    authorId      String
    title         String
    description   String
    imageUrl      String
    imageWidth    Int
    imageHeight   Int
    imageColorHex String

    createdAt DateTime @default(now())

    author   User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
    tags     PostTags[]
    
    bookmarks Bookmark[]
}


model Follow {
    id       String @id @default(cuid())
    byUserId String
    toUserId String

    byUser User @relation(fields: [byUserId], references: [id], onDelete: Cascade, name: "byUser")
    toUser User @relation(fields: [toUserId], references: [id], onDelete: Cascade, name: "toUser")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    bio           String    @default("")

    followings Follow[] @relation(name: "byUser")
    followers  Follow[] @relation(name: "toUser")

    posts     Post[]
    bookmarks Bookmark[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
